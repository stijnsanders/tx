[[@Variants,txDefs,DataLank,txSession,txFilter,txFilterSql,txCache,txTerms,txNodes,]][[!var
filter,filterU,s:string;
fs1,fs2:UTF8String;
f:TtxFilter;
fq1,fq2:TtxSqlQueryFragments;
id,pid,limit,d,c1,c2:integer;
qr1,qr2:TQueryResult;
qs1,qs2,showAsc:boolean;
tc1,tc2,tc3,tc4:TTimerIndex;
d1,d2:TDateTime;
rpFilter:TtxRealmPermission;
LocationCache:TItemCache;
TermDomains:TIndexCache;
ln:TLocationNode;
procedure SwapDates;
var d:TDateTime;
begin
  d:=d1;
  d1:=d2;
  d2:=d;
end;

]][[

//provide parameters for this sequence:
filter:=Values[0];
if Values[1] then rpFilter:=rpAny else rpFilter:=rpView;
if Values[2]='' then limit:=100 else limit:=StrToInt(Values[2]);
if VarIsNull(Values[3]) then d1:=0 else d1:=Trunc(VarToDateTime(Values[3]));
if VarIsNull(Values[4]) then d2:=0 else d2:=Trunc(VarToDateTime(Values[4]))+1;//end date +1 to be smaller than 'opening' midnight of next day
showAsc:=Values[5];
if showAsc then s:='ASC' else s:='DESC';

filterU:=string(URLEncode(filter));
//IsAdminReports:=Session.IsAdmin('reports');

//TODO: delete events? (separate journal?)

f:=TtxFilter.Create;
fq1:=TtxSqlQueryFragments.Create(itObj);
fq1.OrderBy:='Obj.c_ts '+s+', Obj.weight, Obj.name';//m_ts?
if limit<>0 then fq1.Limit:=limit;
fq2:=TtxSqlQueryFragments.Create(itReport);
fq2.OrderBy:='Rpt.ts '+s;
if limit<>0 then fq2.Limit:=limit;
try
  tc1:=GetTimerIndex;
  if filter<>'' then
   begin
    f.FilterExpression:=UTF8Encode(filter);
    if f.ParseError<>'' then
     begin
      <<p style="color:red;">>=f.ParseError<</p>>
     end;

    tc2:=GetTimerIndex;

    fq1.AddFilter(f);
    fq2.AddFilter(f);

    <<p class="buttons">
    <a class="linkbutton" href="FilterBuild.xxm?filter=[[#filterU]]">edit filter</a>
    <a class="linkbutton" href="Filter.xxm?filter=[[#filterU]]">filter...</a>
    <a class="linkbutton" href="Summary.xxm?filter=[[#filterU]]">summary...</a>
    <a class="linkbutton" href="Rss.xxm?[[=Context.ContextString(csQueryString)]]">rss...</a>
    </p>
    <p>
    <span class="weight">parse: [[=GetTimerDeltaMS(tc1,tc2)]]ms</span>
    [[
   end
  else
    tc2:=GetTimerIndex;

  s:='Obj.rlm_id'+Session.Realms[rpFilter].SQL;
  if (d1<>0) and (d2<>0) and (d1>d2) then SwapDates;
  //if d1<>0 then s:=s+' AND tsx>={ts '''+FormatDateTime('yyyy-mm-dd hh:nn:ss',d1)+'''}';
  //if d2<>0 then s:=s+' AND tsx<{ts '''+FormatDateTime('yyyy-mm-dd hh:nn:ss',d2)+'''}';
  if d1<>0 then s:=s+' AND datetime(''1900-01-01'',''+''||tsx||'' day'')>=datetime('''+FormatDateTime('yyyy-mm-dd hh:nn:ss',d1)+''')';
  if d2<>0 then s:=s+' AND datetime(''1900-01-01'',''+''||tsx||'' day'')<datetime('''+FormatDateTime('yyyy-mm-dd hh:nn:ss',d2)+''')';
  if fq1.Where<>'' then fq1.Where:=' AND ('+fq1.Where+')';
  fq1.Where:=StringReplace(s,'tsx','Obj.c_ts',[rfReplaceAll])+fq1.Where;
  if fq2.Where<>'' then fq2.Where:=' AND ('+fq2.Where+')';
  fq2.Where:=StringReplace(s,'tsx','Rpt.ts',[rfReplaceAll])+fq2.Where;

  fs1:=fq1.SQL;
  fs2:=fq2.SQL;
finally
  f.Free;
  fq1.Free;
  fq2.Free;
end;

tc3:=GetTimerIndex;
if filter<>'' then
 begin
  ]]
  <span class="weight">build: [[=GetTimerDeltaMS(tc2,tc3)]]ms</span>
  [[
 end;

qr1:=TQueryResult.Create(Session.DbCon,fs1,[]);
qr2:=TQueryResult.Create(Session.DbCon,fs2,[]);
c1:=0;
c2:=0;
LocationCache:=TItemCache.Create;
TermDomains:=TIndexCache.Create;
try
  tc4:=GetTimerIndex;

  //recordcount is -1 on adOpenForwardOnly
  if filter<>'' then
   begin
    ]]
    <span class="weight">query: [[=GetTimerDeltaMS(tc3,tc4)]]ms</span>
    </p>>
   end;

  qs1:=qr1.Read;
  qs2:=qr2.Read;

  while (qs1 or qs2) and (c1<limit) and (c2<limit) and Context.Connected do
   begin
    if qs1 then d1:=qr1.GetDate('c_ts') else d1:=0.0;//m_ts?
    if qs2 then d2:=qr2.GetDate('ts') else d2:=0.0;

    if qs1 and (not(qs2) or ((d1>=d2) xor showAsc)) then
     begin
      //object

      id:=qr1.GetInt('id');
      d:=TermDomains[id];
      if d=-1 then
       begin
        d:=TermStore.GetDomainID(id);
        TermDomains[id]:=d;
       end;
      <<div style="[[
      if qr1.GetInt('c_uid')<>Session.UserID then begin]]border-right: 3px dotted #8080FF;[[end;
      //m_uid?
      ]]">>
      Context.Include('dObjLocation.xxmi',[],[qr1,LocationCache]);
      <<p class="objecttitle"><a href="Item.xxm?x=i[[,id]]" title="[[,typename]]">>#txImg(qr1.GetInt('icon'))]]&nbsp;[[,name<</a></p>>
      Context.SendHTML(TermStore.TermLinks(itObj,id,d,qr1.GetStr('desc')));
      Context.SendHTML('<p>');
      Context.Include('d_cmw.xxmi',[],[qr1]);
      Context.SendHTML('</p>');
      Context.Include('dObjTokRef.xxmi',[id,'','','<p class="objectinfo">','</p>'],[qr1]);
      <</div>>

      inc(c1);
      qs1:=qr1.Read;
     end
    else
     begin
      //report

      id:=qr2.GetInt('obj_id');
      d:=TermDomains[id];
      if d=-1 then
       begin
        d:=TermStore.GetDomainID(id);
        TermDomains[id]:=d;
       end;
      <<div style="margin-left: 4em;[[
      if qr2.GetInt('uid')<>Session.UserID then begin]]border-right: 3px dotted #8080FF;[[end;
      ]]">
      <p class="reportheader"><a name="rpt[[=qr2['id']]]"></a><a href="Item.xxm?x=i[[=qr2['uid']]]" title="[[=qr2['usrtypename']]]">>#txImg(qr2.GetInt('usricon'))]] [[=qr2['usrname']<</a>
      <span class="date">reported on [[=NiceDateTime(qr2['ts'])]]</span>
      [[
      pid:=qr2.GetInt('pid');
      s:='';
      while (pid<>0) and Context.Connected do
       begin
        ln:=LocationCache[pid] as TLocationNode;
        if ln=nil then ln:=LocationCache.Add(pid,TLocationNode.Create(itObj,pid)) as TLocationNode;
        s:=ln.GetHTML([ghLink,ghIcon,ghTitle],pid)+s;
       end;
      ]][[#s]]
      <a href="Item.xxm?x=i[[=id]]&amp;hr=[[=qr2['id']]]" title="[[=qr2['typename']]]">>#txImg(qr2.GetInt('icon'))]] [[=qr2['name']<</a>
      </p>>
      //TODO: path of obj_id?
      if not(qr2.IsNull('tokicon')) then
       begin
        s:=qr2.GetStr('toksystem');
        if (s<>'') and (s[1]=':') then
         begin
          <<p>
          [[#lblTokens]]
          <a href="Log.xxm?filter=tt[[=qr2['toktype_id']]]*" title="[[=qr2['tokname']]]"><img src="img/cat_[[=Copy(s,2,Length(s)-1)]].png" width="54" height="16" alt="[[=qr2['tokname']]]" [[#globalIconAlign]]/></a>
          </p>>
         end
        else
         begin
          <<p>
          [[#lblTokens]]
          [[#txImg(qr2['tokicon'])]]
          [[=qr2['tokname']]]
          </p>>
         end;
       end;
      if not(qr2.IsNull('reficon')) then
       begin
        <<p>
        [[#lblReferences]]
        [[#txImg(qr2['reficon'])]]
        [[=qr2['refname']]]
        </p>>
       end;
      Context.SendHTML(TermStore.TermLinks(itObj,id,d,qr2.GetStr('desc')));
      if not(qr2.IsNull('relicon')) then
       begin
        <<p><a href="Item.xxm?x=i[[=qr2['obj2_id']]]" title="[[=qr2['reltypename']]]">>#txImg(qr2['relicon'])]] [[=qr2['relname']<</a></p>>
       end;
      <</div>>

      inc(c2);
      qs2:=qr2.Read;
     end;
   end;
finally
  qr1.Free;
  qr2.Free;
  LocationCache.Free;
  TermDomains.Free;
end;
