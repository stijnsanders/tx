[[@txSession,txDefs,txFilter,txFilterSql,txCache,txNodes,DataLank]][[!var
IsAdmin:boolean;
qr:TQueryResult;
i,id,c,pid:integer;
fs0,fs1,fs2,fp,fr,t,t0:UTF8String;
jrt,csv,dd:boolean;
fx,s:string;
f:TtxFilter;
fq:TtxSqlQueryFragments;
LocationCache:TItemCache;
ln:TLocationNode;
m,mi,mj,mk,ml,jrt_id:integer;
mt:array of record
  jrt_id,jrt_icon,m,c:integer;
  jrt_name:string;
end;

function csvStr(const x:string):string;
var
  i:integer;
begin
  i:=1;
  while (i<=Length(x)) and (x[i]<>';') and (x[i]<>'"') do inc(i);
  if i<=Length(x) then
    Result:='"'+StringReplace(x,'"','""',[rfReplaceAll])+'"'
  else
    Result:=x;
end;

]][[

csv:=Context['csv'].AsInteger=1;
if not(csv) then
  Context.Include('dHead.xxmi',['Journals: Totals']);
IsAdmin:=Session.IsAdmin('journals');
//assert Use_Journals
id:=Context['id'].AsInteger;


if id=0 then
 begin

  if IsAdmin then
    qr:=TQueryResult.Create(Session.DbCon,'select * from Jrl order by id',[])
  else
   begin
    fs0:='';
    c:=0;
    for i:=0 to Length(Session.Journals)-1 do
      if Session.Journals[i].CanConsult then
       begin
        fs0:=fs0+','+IntToStrU(Session.Journals[i].jrl_id);
        inc(c);
       end;
    case c of
      0:fs0:='=0';//assert no Jrl.id=0
      1:fs0[1]:='=';
      else
       begin
        fs0[1]:='(';
        fs0:=' in '+fs0+')';
       end;
    end;
    qr:=TQueryResult.Create(Session.DbCon,'select * from Jrl where Jrl.id'+fs0+' order by id',[]);
   end;
  try
    <<h2>Journal totals</h2>>
    if qr.EOF then
     begin
      if IsAdmin then
       begin
        <<p class="information">No journals.<br /><a href="fJrl.xxm">Click here</a> to create a journal.</p>>
       end
      else
       begin
        <<p class="information">You currently have no consultable journals.</p>>
       end;
     end
    else
     begin
      <<p>Select a journal to total entries:</p>
      <ul>>
      while qr.Read do
       begin
        <<li><a href="[[?'id',qr['id']]]">>.name<</a></li>>
       end;
      <</ul>>
     end;
  finally
    qr.Free;
  end;
 
 end
else
 begin
  if not IsAdmin then
   begin
    i:=0;
    while (i<Length(Session.Journals)) and (Session.Journals[i].jrl_id<>id) do inc(i);
    if not((i<Length(Session.Journals)) and Session.Journals[i].CanConsult) then
      raise Exception.Create('Access denied');
   end;

  if not(csv) then
   begin
    qr:=TQueryResult.Create(Session.DbCon,'select * from Jrl where id=?',[id]);
    try
      <<h2>>.name<</h2>>
      //TODO: granularity
    finally
      qr.Free;
    end;
   end;

  if Context['p'].Value='' then //TODO:
   begin

    <<form method="get">
    <input type="hidden" name="id" value="[[=id]]" />
    <dl>
    <dt>Totals by period</dt>
    <dd>
    <label><input type="radio" name="p" value="0" /> <i>by journal granularity</i></label><br />
    <label><input type="radio" name="p" value="1" /> hourly</label><br />
    <label><input type="radio" name="p" value="2" /> daily</label><br />
    <label><input type="radio" name="p" value="3" /> weekly</label><br />
    <label><input type="radio" name="p" value="4" checked="1" /> monthly</label><br />
    <label><input type="radio" name="p" value="5" /> quarterly</label><br />
    <label><input type="radio" name="p" value="6" /> yearly</label><br />
    </dd>
    <dt>Options</dt>
    <dd>
    <label><input type="checkbox" name="t" value="1" checked="1" />
    Totals by entry types</label><br />
    <label><input type="checkbox" name="z" value="1" />
    Ignore entries of zero length</label><br />
    </dd>
    [[//assert Use_ObjPath]]
    <dt>Filter user objects (optional) <span style="font-weight:normal;">(e.g. <span class="litref">ot"user"*</span>)</span></dt>
    <dd>
    [[Context.Include('dFltSelect.xxmi',['uf','']);]]
    </dd>
    <dt>Group by object in path of user (optional) <span style="font-weight:normal;">(e.g.: <span class="litref">ot"usergroup"*</span>)</span></dt>
    <dd>
    [[Context.Include('dFltSelect.xxmi',['ug','']);]]
    <label><input type="radio" name="ur" value="0" /> highest</label><br />
    <label><input type="radio" name="ur" value="1" checked="1" /> lowest</label><br />
    </dd>
    <dt>Filter entry objects (optional) <span style="font-weight:normal;">(e.g.: <span class="litref">ot"project"*</span>)</span></dt>
    <dd>
    [[Context.Include('dFltSelect.xxmi',['if','']);]]
    </dd>
    <dt>Group by object in path of entry object (optional) <span style="font-weight:normal;">(e.g.: <span class="litref">ot"project"*</span>)</span></dt>
    <dd>
    [[Context.Include('dFltSelect.xxmi',['ig','']);]]
    <label><input type="radio" name="ir" value="0" /> highest</label><br />
    <label><input type="radio" name="ir" value="1" checked="1" /> lowest</label><br />
    </dd>
    </dl>
    <p>>#txFormButton<</p>
    </form>>

    //TODO

   end
  else
   begin

    jrt:=Context['t'].AsInteger=1;
    dd:=Context['q'].Value<>'';//drill-down

    //base for query over Jre
    fs0:='select Jre.id,Jre.obj_id,Jre.uid'
      +',Jre.ts+2415018.5 as ets' //,datetime('1900-01-01',(Jre.ts-2.0)||' day') as ets
      +',Jre.minutes';
    if jrt then fs0:=fs0+',Jre.jrt_id';
    fs0:=fs0
      +#13#10'from Jre inner join Jrt on Jrt.id=Jre.jrt_id'
      +' where Jrt.jrl_id=?';
    if Context['z'].AsInteger=1 then fs0:=fs0+' and Jre.minutes<>0';

    //filter over entry user objects
    fx:=Context['uf1'].Value;
    if fx='' then fx:=Context['uf2'].Value;
    if fx<>'' then
     begin
      fq:=TtxSqlQueryFragments.Create(itObj);
      try
        fq.Fields:='X0.*';
        fq.Tables:='Obj left join ObjType on ObjType.id=Obj.objtype_id'#13#10
          +'inner join ('#13#10+fs0+#13#10') X0 on X0.uid=Obj.id'#13#10;
        f:=TtxFilter.Create;
        try
          f.FilterExpression:=UTF8Encode(fx);
          if f.ParseError<>'' then
           begin
            <<p style="color:red;">>=f.ParseError<</p>>
           end;
          fq.AddFilter(f);
        finally
          f.Free;
        end;

        //TODO:
        //if fq.Where<>'' then fq.Where:=' and ('+fq.Where+')';
        //fq.Where:='Obj.rlm_id'+Session.Realms[rpFilter].SQL+fq.Where;//?
        fq.OrderBy:='';

        fs0:=fq.SQL;
      finally
        fq.Free;
      end;
     end;

    //group over user objects 
    fx:=Context['ug1'].Value;
    if fx='' then fx:=Context['ug2'].Value;
    case Context['ur'].AsInteger of
      0:fr:='P1.lvl desc';
      1:fr:='P1.lvl';//asc
      //else raise?
    end;
    fq:=TtxSqlQueryFragments.Create(itObj);
    try
      fq.Fields:='X1.id,X1.obj_id,P1.pid as uid,X1.ets,X1.minutes';
      if jrt then fq.Fields:=fq.Fields+',X1.jrt_id';
      fq.Fields:=fq.Fields
        +',rank()over(partition by X1.id order by '+fr+') as R1';
      fq.Tables:='('#13#10+fs0+#13#10') X1'
        +#13#10'inner join ObjPath P1 on P1.oid=X1.uid';//TODO: left outer join?
      if fx<>'' then
       begin
        fq.Tables:=fq.Tables
          +#13#10'inner join Obj on Obj.id=P1.pid'
          +#13#10'inner join ObjType on ObjType.id=Obj.objtype_id'
          +#13#10;
        f:=TtxFilter.Create;
        try
          f.FilterExpression:=UTF8Encode(fx);
          if f.ParseError<>'' then
           begin
            <<p style="color:red;">>=f.ParseError<</p>>
           end;
          fq.AddFilter(f);
        finally
          f.Free;
        end;
       end;
      fq.OrderBy:='';
      fs1:='select Y1.id,Y1.obj_id,Y1.uid,Y1.ets,Y1.minutes';
      if jrt then fs1:=fs1+',Y1.jrt_id';
      fs1:=fs1
        +' from ('#13#10+fq.SQL+') Y1 where Y1.R1=1';
    finally
      fq.Free;
    end;

    //filter over entry objects
    fx:=Context['if1'].Value;
    if fx='' then fx:=Context['if2'].Value;
    if fx<>'' then
     begin
      fq:=TtxSqlQueryFragments.Create(itObj);
      try
        fq.Fields:='Z.*';
        fq.Tables:='Obj left join ObjType on ObjType.id=Obj.objtype_id'#13#10
          +'inner join ('#13#10+fs1+#13#10') Z on Z.obj_id=Obj.id'#13#10;
        f:=TtxFilter.Create;
        try
          f.FilterExpression:=UTF8Encode(fx);
          if f.ParseError<>'' then
           begin
            <<p style="color:red;">>=f.ParseError<</p>>
           end;
          fq.AddFilter(f);
        finally
          f.Free;
        end;

        //TODO:
        //if fq.Where<>'' then fq.Where:=' AND ('+fq.Where+')';
        //fq.Where:='Obj.rlm_id'+Session.Realms[rpFilter].SQL+fq.Where;//?
        fq.OrderBy:='';

        fs1:=fq.SQL;
      finally
        fq.Free;
      end;
     end;

    //group over entry objects
    fx:=Context['ig1'].Value;
    if fx='' then fx:=Context['ig2'].Value;
    case Context['ir'].AsInteger of
      0:fr:='P2.lvl desc';
      1:fr:='P2.lvl';//asc
      //else raise?
    end;
    fq:=TtxSqlQueryFragments.Create(itObj);
    try
      fq.Fields:='X2.id,P2.pid as obj_id,X2.uid,X2.ets,X2.minutes';
      if jrt then fq.Fields:=fq.Fields+',X2.jrt_id';
      fq.Fields:=fq.Fields
        +',rank()over(partition by X2.id order by '+fr+') as R2';
      fq.Tables:='('#13#10+fs1+#13#10') X2'
        +#13#10'inner join ObjPath P2 on P2.oid=X2.obj_id';//TODO: left outer join?
      if fx<>'' then
       begin
        fq.Tables:=fq.Tables
          +#13#10'inner join Obj on Obj.id=P2.pid'
          +#13#10'inner join ObjType on ObjType.id=Obj.objtype_id'
          +#13#10;
        f:=TtxFilter.Create;
        try
          f.FilterExpression:=UTF8Encode(fx);
          if f.ParseError<>'' then
           begin
            <<p style="color:red;">>=f.ParseError<</p>>
           end;
          fq.AddFilter(f);
        finally
          f.Free;
        end;
       end;
      fq.OrderBy:='';
      fs2:='select Y2.id,Y2.obj_id,Y2.uid,Y2.ets,Y2.minutes';
      if jrt then fs2:=fs2+',Y2.jrt_id';
      fs2:=fs2
        +' from ('#13#10+fq.SQL+') Y2 where Y2.R2=1';
    finally
      fq.Free;
    end;

    //group by time interval
    case Context['p'].AsInteger of
      0://by journal granularity
        fp:='strftime(''%Y-%m-%d %H:%M'',ets)';
      1://hourly
        fp:='strftime(''%Y-%m-%d %H'',ets)';
      2://daily
        fp:='strftime(''%Y-%m-%d'',ets)';
      3://weekly
        fp:='strftime(''%Y:%W'',ets)';
        //iso-week? (strftime('%j',date('1900-01-01','+'||(Jre.ts-5.0)||' day','weekday 4'))-1)/7+1
      4://monthly
        fp:='strftime(''%Y-%m'',ets)';
      5://quarterly
        fp:='strftime(''%Y'',ets)'+'||'' Q''||((cast(strftime(''%m'',ets) as int)-1)/3+1)';
      6://yearly
        fp:='strftime(''%Y'',ets)';
      else
        fp:='"invalid period"';//raise?
    end;

    if not(dd) then
     begin
      fs0:='select '+fp+' as period,XX.obj_id,XX.uid';
      if jrt then fs0:=fs0+',XX.jrt_id';
      fs0:=fs0
        +',sum(XX.minutes) as minutes,count(*) as entries';
      if jrt then fs0:=fs0
        +',Jrt.icon as jrt_icon,Jrt.name as jrt_name';
      if csv then fs0:=fs0 
        +',O1.name as usr_name,O2.name as obj_name';
      fs0:=fs0
        +' from ('#13#10+fs2+#13#10') XX';
      if jrt then fs0:=fs0  
        +' inner join Jrt on Jrt.id=XX.jrt_id';
      if csv then fs0:=fs0
        +' inner join Obj O1 on O1.id=XX.uid'
        +' inner join Obj O2 on O2.id=XX.obj_id';
      fs0:=fs0
        +#13#10'group by '+fp+',XX.obj_id,XX.uid';
      if jrt then fs0:=fs0+',XX.jrt_id,Jrt.icon,Jrt.name';
      fs0:=fs0
        +#13#10'order by 1 desc';//obj_weight,u_weight?
  
      LocationCache:=TItemCache.Create;
      qr:=TQueryResult.Create(Session.DbCon,fs0,[id]);
      try
        if qr.EOF then
         begin
          <<p><i>No journal entries found.</i></p>>
         end
        else
        if csv then
         begin
          Context.ContentType:='text/csv';
          Context.DispositionAttach('JrtTotals'+FormatDateTime('yyyymmddhhnnss',Now)+'.csv');
          Context.SendHTML('Period;UserID;User;ObjectID;Object;');
          if jrt then Context.SendHTML('EntryID;Entry;');
          Context.SendHTML('Minutes;Entries'#13#10);
          while qr.Read do
           begin
            Context.SendHTML([qr['period'],';',qr['uid'],';',csvStr(qr.GetStr('usr_name')),';',qr['obj_id'],';',csvStr(qr.GetStr('obj_name')),';']);
            if jrt then Context.SendHTML([qr['jrt_id'],';',csvStr(qr.GetStr('jrt_name')),';']);
            Context.SendHTML([qr['minutes'],';',qr['entries'],#13#10]);
           end;
         end
        else
         begin
          <<table cellspacing="2" cellpadding="2" border="0" class="listtable">
          <tr>
          <th>period</th>
          <th>user</th>
          <th>object</th>>
          if jrt then
           begin
            <<th>entry</th>>
           end;
          <<th title="minutes">&#x27;</th>
          <th title="count">#</th>
          </tr>>

          t0:='?'+UTF8Encode(Context.ContextString(csQueryString));
  
          m:=0;
          mi:=0;
          ml:=0;
          c:=0;
          while qr.Read do
           begin
  
            inc(m,qr.GetInt('minutes'));
            inc(c);
            if jrt then
             begin
              jrt_id:=qr.GetInt('jrt_id');
              mj:=0;
              while (mj<mi) and (mt[mj].jrt_id<jrt_id) do inc(mj);
              if (mj=mi) or (mt[mj].jrt_id<>jrt_id) then
               begin
                if mi=ml then
                 begin
                  inc(ml,$20);//grow
                  SetLength(mt,ml);
                 end;
                mk:=mi;
                inc(mi);
                while (mk>mj) do
                 begin
                  mt[mk]:=mt[mk-1];
                  dec(mk);
                 end;
                mt[mj].jrt_id:=jrt_id;
                mt[mj].jrt_icon:=qr.GetInt('jrt_icon');
                mt[mj].jrt_name:=qr.GetStr('jrt_name');
                mt[mj].m:=qr.GetInt('minutes');
                mt[mj].c:=qr.GetInt('entries');
               end
              else
               begin
                inc(mt[mj].m,qr.GetInt('minutes'));
                inc(mt[mj].c,qr.GetInt('entries'));
               end;
             end;

            t:=t0;
             
            <<tr>
            <td>>.period<</td>>
            t:=t+'&q='+UTF8Encode(URLEncode(qr.GetStr('period')));
  
            pid:=qr.GetInt('uid');
            t:=t+'&ux='+IntToStrU(pid);
            ln:=LocationCache[pid] as TLocationNode;
            if ln=nil then ln:=LocationCache.Add(pid,TLocationNode.Create(itObj,pid)) as TLocationNode;
            <<td>>#ln.GetHTML([ghLink,ghIcon,ghName,ghTitle,ghFrameListClass],pid)<</td>>
  
            pid:=qr.GetInt('obj_id');
            t:=t+'&ix='+IntToStrU(pid);
            ln:=LocationCache[pid] as TLocationNode;
            if ln=nil then ln:=LocationCache.Add(pid,TLocationNode.Create(itObj,pid)) as TLocationNode;
            <<td>>#ln.GetHTML([ghLink,ghIcon,ghName,ghTitle,ghFrameListClass],pid)<</td>>
  
            if jrt then
             begin
              <<td>[[#txImg(qr.GetInt('jrt_icon'))]] [[.jrt_name]]</td>>
              t:=t+'&tx='+IntToStrU(qr.GetInt('jrt_id'));
             end;
  
            ]]
            [[#JournalMinutesTD(qr.GetInt('minutes'))]]
            <td style="text-align:right;"><a href="[[=t]]">>.entries<</a></td>
            </tr>>
           end;
  
          <</table>>

          if jrt and (mi<>0) then
           begin
            <<table cellspacing="2" cellpadding="2" border="0" class="listtable">
            <tr>
            <th>entries</th>
            <th>#</th>
            <th>&Sigma;&#x27;</th>
            </tr>>
            //TODO: sort by jrt_name?jrt_id?
            for mj:=0 to mi-1 do
             begin
              <<tr>
              <td>>#txImg(mt[mj].jrt_icon)]][[=mt[mj].jrt_name<</td>
              <td style="text-align:right;">>=mt[mj].c<</td>
              [[#JournalMinutesTD(mt[mj].m)]]
              </tr>>
             end;
            <<tr>
            <th>&nbsp;</th>
            <th style="text-align:right;">>=c<</th>
            <th style="text-align:right;">>=JournalMinutes(m)<</th>
            </tr>
            </table>>
           end
          else
           begin
            <<table cellspacing="2" cellpadding="2" border="0" class="listtable">
            <tr>
            <th>#</th>
            <th>&Sigma;&#x27;</th>
            </tr>
            <tr>
            <th style="text-align:right;">>=c<</th>
            <th style="text-align:right;">>=JournalMinutes(m)<</th>
            </tr>
            </table>>
           end;

          <<p><a class="linkbutton" href="?[[=Context.ContextString(csQueryString)]]&csv=1">CSV...</a></p>>
        end;
      finally
        qr.Free;
        LocationCache.Free;
      end;
     end
    else
     begin
      //drill-down

      fs0:='select Jre.id, Jre.obj_id, Jre.ts, Jre.minutes, Jre.uid,'+
       ' Jre.jrt_id, Jrt.icon AS jrt_icon, Jrt.name AS jrt_name,'+
       ' Obj.name, Obj.pid, ObjType.icon, ObjType.name AS typename,'+
       ' UsrObj.id AS usrid, UsrObj.name AS usrname, UsrObjType.icon AS usricon, UsrObjType.name AS usrtypename';
      if Use_ObjTokRefCache then fs0:=fs0+', ObjTokRefCache.tokHTML, ObjTokRefCache.refHTML';
      fs0:=fs0
        +#13#10'from ('#13#10+fs2+#13#10') XX'
        +#13#10'inner join Jre on Jre.id=XX.id'
        +' inner join Jrt on Jrt.id=Jre.jrt_id'
        +#13#10'inner join Obj as UsrObj on UsrObj.id=Jre.uid'
        +' inner join ObjType on ObjType.id=Obj.objtype_id'
        +#13#10'inner join Obj on Obj.id=Jre.obj_id'
        +' inner join ObjType as UsrObjType on UsrObjType.id=UsrObj.objtype_id';
      if Use_ObjTokRefCache then fs0:=fs0
        +#13#10'left outer join ObjTokRefCache on ObjTokRefCache.id=Obj.id';
      fs0:=fs0
        +#13#10'where '+fp+'=? and XX.obj_id=? and XX.uid=?';
      if jrt then fs0:=fs0+' and XX.jrt_id='+IntToStrU(Context['tx'].AsInteger);
      fs0:=fs0
        +#13#10'order by Jre.ts,Jre.minutes,Jre.id';//obj_weight,u_weight?

      LocationCache:=TItemCache.Create;
      qr:=TQueryResult.Create(Session.DbCon,fs0,[id,Context['q'].Value,Context['ix'].AsInteger,Context['ux'].AsInteger]);
      try
        if qr.EOF then
         begin
          <<p><i>No journal entries found.</i></p>>
         end
        else
        if csv then
         begin
          Context.ContentType:='text/csv';
          Context.DispositionAttach('JrtTotals'+FormatDateTime('yyyymmddhhnnss',Now)+'D.csv');
          Context.SendHTML('UserID;User;ObjectID;Object;');
          if jrt then Context.SendHTML('EntryID;Entry;');
          Context.SendHTML('Start;Minutes;End'#13#10);
          while qr.Read do
           begin
            Context.SendHTML([qr['uid'],';',csvStr(qr.GetStr('usrname')),';',qr['obj_id'],';',csvStr(qr.GetStr('name')),';']);
            if jrt then Context.SendHTML([qr['jrt_id'],';',csvStr(qr.GetStr('jrt_name')),';']);
            Context.SendHTML([FormatDateTime('yyyy-mm-dd hh:nn',qr.GetDate('ts')),';',qr['minutes'],';',
              FormatDateTime('yyyy-mm-dd hh:nn',qr.GetDate('ts')+qr.GetInt('minutes')/1440.0),#13#10]);
           end;
         end
        else
         begin
          <<p id="fliTitle" class="highlight1" style="position:absolute;margin:0em;font-weight:bold;"></p>
          <table cellspacing="2" cellpadding="2" border="0" class="listtable">
          <tr>
          <th>user</th>
          <th>object</th>
          <th>entry</th>
          <th>start</th>
          <th title="minutes">&#x27;</th>
          <th>end</th>
          </tr>>
          m:=0;
          mi:=0;
          ml:=0;
          c:=0;
          while qr.Read do
           begin
            if jrt then
             begin
              inc(m,qr.GetInt('minutes'));
              inc(c);
              jrt_id:=qr.GetInt('jrt_id');
              mj:=0;
              while (mj<mi) and (mt[mj].jrt_id<jrt_id) do inc(mj);
              if (mj=mi) or (mt[mj].jrt_id<>jrt_id) then
               begin
                if mi=ml then
                 begin
                  inc(ml,$20);//grow
                  SetLength(mt,ml);
                 end;
                mk:=mi;
                inc(mi);
                while (mk>mj) do
                 begin
                  mt[mk]:=mt[mk-1];
                  dec(mk);
                 end;
                mt[mj].jrt_id:=jrt_id;
                mt[mj].jrt_icon:=qr.GetInt('jrt_icon');
                mt[mj].jrt_name:=qr.GetStr('jrt_name');
                mt[mj].m:=qr.GetInt('minutes');
                mt[mj].c:=1;
               end
              else
               begin
                inc(mt[mj].m,qr.GetInt('minutes'));
                inc(mt[mj].c);
               end;
             end;
            <<tr>
            <td>
            <a href="Item.xxm?x=i[[.uid]]" title="[[.usrtypename]]">>#txImg(qr.GetInt('usricon'))]] [[.usrname<</a>
            [[//TODO: IsAdmin fJre, delete?]]
            </td>
            <td>>
            pid:=qr.GetInt('pid');
            s:=' ';
            while (pid<>0) and Context.Connected do
            begin
              ln:=LocationCache[pid] as TLocationNode;
              if ln=nil then ln:=LocationCache.Add(pid,TLocationNode.Create(itObj,pid)) as TLocationNode;
              s:=ln.GetHTML([ghLink,ghIcon,ghTitle,ghFrameListClass],pid)+s;
            end;
            Context.SendHTML(s);
            <<a href="Item.xxm?x=i[[.obj_id]]" title="[[.typename]]">>#txImg(qr.GetInt('icon'))]]&nbsp;[[.name<</a>>
            Context.Include('dObjTokRef.xxmi',[qr.GetInt('id'),#13#10' ','&nbsp;'],[qr]);
            //Context.Include('d_cmw.xxmi',[],[qr]);
            <</td>
            <td>>#txImg(qr.GetInt('jrt_icon'))]][[.jrt_name<</td>
            <td style="text-align:right;">>=JournalDateTime(qr['ts'])<</td>
            [[#JournalMinutesTD(qr.GetInt('minutes'))]]
            <td style="text-align:right;">>=JournalDateTime(double(qr['ts'])+qr.GetInt('minutes')/1440.0)<</td>
            </tr>>
           end;
          <</table>
          <script><!--
          $(".fli")
          .mouseenter(function(){$("."+this.className.split(" ")[1]).addClass("highlight1");$("#fliTitle").text(this.title);})
          .mouseleave(function(){$("."+this.className.split(" ")[1]).removeClass("highlight1");$("#fliTitle").text("");});
          //--></script>>

          if jrt and (mi<>0) then
           begin
            <<table cellspacing="2" cellpadding="2" border="0" class="listtable">
            <tr>
            <th>entries</th>
            <th>#</th>
            <th>&Sigma;&#x27;</th>
            </tr>>
            //TODO: sort by jrt_name?jrt_id?
            for mj:=0 to mi-1 do
             begin
              <<tr>
              <td>>#txImg(mt[mj].jrt_icon)]][[=mt[mj].jrt_name<</td>
              <td style="text-align:right;">>=mt[mj].c<</td>
              [[#JournalMinutesTD(mt[mj].m)]]
              </tr>>
             end;
            <<tr>
            <th>&nbsp;</th>
            <th style="text-align:right;">>=c<</th>
            <th style="text-align:right;">>=JournalMinutes(m)<</th>
            </tr>
            </table>>
           end;

          <<p><a class="linkbutton" href="?[[=Context.ContextString(csQueryString)]]&csv=1">CSV...</a></p>>
        end;
      finally
        qr.Free;
        LocationCache.Free;
      end;
     end;

   end;


 end;

if not(csv) then
  Context.Include('dFoot.xxmi');
