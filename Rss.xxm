[[@Variants,txDefs,DataLank,txSession,txFilter,txFilterSql,txCache,]][[!var
title:WideString;
urlprefix:string;
fs1,fs2,s:UTF8String;
sy,sm,sd,ey,em,ed:word;
fv:TtxFilterViewInfo;
f:TtxFilter;
fq1,fq2:TtxSqlQueryFragments;
id,limit:integer;
qr1,qr2:TQueryResult;
qs1,qs2,filterme:boolean;
d1,d2:TDateTime;
ObjLocationCache:TItemCache;
  procedure SwapDates;
  var d:TDateTime;
  begin
   d:=d1;
   d1:=d2;
   d2:=d;
  end;
]][[

Context.ContentType:='application/rss+xml';

//<link rel="alternate" type="application/rss+xml" href="Rss.xxm" title="" />

title:=Context['title'].Value;
GetFilterViewInfo(Context,fv);
//encoding? in xml header?

sy:=Context['sy'].AsInteger;
sm:=Context['sm'].AsInteger;
sd:=Context['sd'].AsInteger;
ey:=Context['ey'].AsInteger;
em:=Context['em'].AsInteger;
ed:=Context['ed'].AsInteger;

if sy=0 then d1:=0 else d1:=EncodeDate(sy,sm,sd);
if ey=0 then d2:=0 else d2:=EncodeDate(ey,em,ed)+1;//end date +1 to be smaller than 'opening' midnight of next day

//IsAdminReports:=Session.IsAdmin('reports');

//TODO: delete events? (separate journal?)

if Context['limit'].Value='' then limit:=100 else limit:=Context['limit'].AsInteger;
if Context['sort'].AsInteger=1 then s:='ASC' else s:='DESC';
filterme:=Context['notme'].AsInteger=1;

urlprefix:=Context.URL;
urlprefix:=Copy(urlprefix,1,Pos('rss.xxm',LowerCase(urlprefix))-1);

<<?xml version="1.0"?>
<rss version="2.0">
<channel>
<title>tx - [[
if title='' then
  if fv.filter='' then Context.Send('Log') else Context.Send('Log by filter "'+fv.filter+'"')
else
  Context.Send(title);
<</title>
<link>>=urlprefix<</link>
[[/
<image><title></title><width></width><height></height><url></url><link></link></image>
<language></language>
<webMaster></webMaster>
]]
<lastBuildDate>>=DateToXml(Now)<</lastBuildDate>
<ttl>15</ttl>
<description>>
if fv.filter<>'' then Context.Send(' by filter "'+fv.filter+'"');
if sy=0 then
  if ey=0 then
    //Context.Send(' recent items')
  else
    Context.Send(' up to '+VarToStr(d2))
else
  if ey=0 then
    Context.Send(' since '+VarToStr(d1))
  else
    Context.Send(' from '+VarToStr(d1)+' up to '+VarToStr(d2));
<</description>

[[

//TODO: get timezone bias

f:=TtxFilter.Create;
fq1:=TtxSqlQueryFragments.Create(itObj);
fq1.OrderBy:='Obj.c_ts '+s+', Obj.weight, Obj.name';//m_ts?
if limit<>0 then fq1.Limit:=limit;
fq2:=TtxSqlQueryFragments.Create(itReport);
fq2.OrderBy:='Rpt.ts '+s;
if limit<>0 then fq2.Limit:=limit;
try
  if fv.filter<>'' then
   begin
    f.FilterExpression:=fv.filter;
    if f.ParseError<>'' then
     begin
      ]]
        <item><guid isPermaLink="false">tag:txRssQueryError</guid>
        <title>RssQueryError</title>
        <link>>=urlprefix]]/Log.xxm?[[=Context.ContextString(csQueryString)<</link>
        <description>>=f.ParseError<</description>
        <pubDate>>=DateToXml(Now)<</pubDate>
        </item>
      [[
     end;
    fq1.AddFilter(f);
    fq2.AddFilter(f);
   end;

  s:='Obj.rlm_id'+Session.Realms[fv.rp].SQL;
  if (d1<>0) and (d2<>0) and (d1>d2) then SwapDates;
  //if d1<>0 then s:=s+' AND tsx>={ts '''+FormatDateTime('yyyy-mm-dd hh:nn:ss',d1)+'''}';
  //if d2<>0 then s:=s+' AND tsx<{ts '''+FormatDateTime('yyyy-mm-dd hh:nn:ss',d2)+'''}';
  if d1<>0 then s:=s+' AND datetime(''1900-01-01'',''+''||tsx||'' day'')>=datetime('''+UTF8String(FormatDateTime('yyyy-mm-dd hh:nn:ss',d1))+''')';
  if d2<>0 then s:=s+' AND datetime(''1900-01-01'',''+''||tsx||'' day'')<datetime('''+UTF8String(FormatDateTime('yyyy-mm-dd hh:nn:ss',d2))+''')';
  if fq1.Where<>'' then fq1.Where:=' AND ('+fq1.Where+')';
  fq1.Where:=UTF8String(StringReplace(string(s),'tsx','Obj.c_ts',[rfReplaceAll]))+fq1.Where;
  if fq2.Where<>'' then fq2.Where:=' AND ('+fq2.Where+')';
  fq2.Where:=UTF8String(StringReplace(string(s),'tsx','Rpt.ts',[rfReplaceAll]))+fq2.Where;

  fs1:=fq1.SQL;
  fs2:=fq2.SQL;
finally
  f.Free;
  fq1.Free;
  fq2.Free;
end;
  qr1:=TQueryResult.Create(Session.DbCon,fs1,[]);
  qr2:=TQueryResult.Create(Session.DbCon,fs2,[]);
  ObjLocationCache:=TItemCache.Create;
  try
    qs1:=qr1.Read;
    qs2:=qr2.Read;
       while qs1 and qs2 and Context.Connected do
         begin
        if qs1 then d1:=qr1.GetDate('c_ts') else d1:=0;//m_ts?
        if qs2 then d2:=qr2.GetDate('ts') else d2:=0;

        if qs1 and (d1>d2) then
         begin
          //object
          if not(filterme) or (qr1.GetInt('c_uid')<>Session.UserID) or (qr1.GetInt('m_uid')<>Session.UserID) then
           begin
            id:=qr1.GetInt('id');
            title:=qr1.GetStr('name');
            ]]
            <item><guid isPermaLink="true">>=urlprefix]]Item.xxm?x=i[[=id<</guid>
            <title>>=title<</title>
            <link>>=urlprefix]]Item.xxm?x=i[[,id<</link>
            <description><![CDATA[<p><a href="[[=urlprefix]]Item.xxm?x=i[[,id]]" title="[[,typename]]">>#txImg(qr1.GetInt('icon'))]]&nbsp;[[=title<</a></p>
            [[
            Context.SendHTML(qr1.GetStr('desc'));//TODO: SafeHTML
            Context.SendHTML('<p>'+lblLocation+' ');
            Context.Include('dObjLocMini.xxmi',[],[qr1,ObjLocationCache]);
            Context.SendHTML('</p><p>');
            Context.Include('d_cmw.xxmi',[],[qr1]);
            Context.SendHTML('</p>');
            Context.Include('dObjTokRef.xxmi',[id,'','','<p>','</p>'],[qr1]);
            ]]]]></description>
            <pubDate>>=DateToXml(qr1.GetDate('m_ts'))<</pubDate>
            </item>
            [[
           end;
          qs1:=qr1.Read;
         end
        else
         begin
          //report
          if not(filterme) or (qr2.GetInt('uid')<>Session.UserID) then
           begin
            id:=qr2.GetInt('obj_id');
            if not(qr2.IsNull('reficon')) then title:='reference' else
              if not(qr2.IsNull('tokicon')) then title:='token' else
                title:='report';
            ]]
            <item><guid isPermaLink="true">>=urlprefix]]Item.xxm?x=i[[=id]]#rpt[[=qr2['id']<</guid>
            <title>[[=title]] by [[=qr2['usrname']]] "[[=qr2['name']]]" ([[=Length(qr2.GetStr('desc'))]])</title>
            <link>>=urlprefix]]Item.xxm?x=i[[=id]]#rpt[[=qr2['id']<</link>
            <description><![CDATA[<p><a href="Item.xxm?x=i[[=qr2['uid']]]" title="[[=qr2['usrtypename']]]">>#txImg(qr2.GetInt('usricon'))]] [[=qr2['usrname']<</a>
            reported on [[=NiceDateTime(qr2['ts'])]]
            <a href="Item.xxm?x=i[[=id]]" title="[[=qr2['typename']]]">>#txImg(qr2.GetInt('icon'))]] [[=qr2['name']<</a>
            </p>
            [[
            //TODO: path of obj_id?
            if not(qr2.IsNull('tokicon')) then
             begin
              ]]
              <p>
              [[#lblTokens]]
              [[#txImg(qr2['tokicon'])]]
              [[=qr2['tokname']]]
              </p>
              [[
             end;
            if not(qr2.IsNull('reficon')) then
             begin
              ]]
              <p>
              [[#lblReferences]]
              [[#txImg(qr2['reficon'])]]
              [[=qr2['refname']]]
              </p>
              [[
             end;
            Context.SendHTML(qr2.GetStr('desc'));//TODO: SafeHTML
            if not(qr2.IsNull('relicon')) then
             begin
              ]]
              <p>
              <a href="Item.xxm?x=i[[=qr2['obj2_id']]]" title="[[=qr2['reltypename']]]">>#txImg(qr2['relicon'])]] [[=qr2['relname']<</a>
              </p>
              [[
             end;
            ]]]]></description>
            <pubDate>>=DateToXml(qr2.GetDate('ts'))<</pubDate>
            </item>
            [[
           end;
          qs2:=qr2.Read;
         end;
       end;
  finally
    qr1.Free;
    qr2.Free;
    ObjLocationCache.Free;
  end;
]]
</channel>
</rss>
