[[@txDefs,DataLank,txSession,]][[!var
root,id,rid,nid,pid,i,j,l,ii,ObjTypeID,RlmID,dweight:integer;
fmt,n,n1:string;
d:TDateTime;
autoCreate:boolean;
st:TQueryResult;
]][[
CheckMaintProtect(Context);

root:=Context['obj'].AsInteger;
if root=0 then
 begin
  Context.Include('dHead.xxmi',['Maintenance: re-order reports by date']);
  ]]
  [[#StringReplace(txForm('MaintRpt.xxm',[],'selectnode_required("obj","an object of which to reorder the reports")'),'method="post"','method="get"',[])]]
  <dl>[[//see also Modify.xxm]]
  <dt>Object</dt><dd>>Context.Include('dObjSelect.xxmi',['obj',0,0,0,'',true]);<</dd>
  <dt>Sub-node(s) name format</dt>
  <dd><input type="text" name="fmt" value="yyyy\yyyy-mm" /> <span class="small">use "\" to define multiple levels of sub-nodes</span></dd>
  <dt>Options</dt>
  <dd><label><input type="checkbox" name="ac" value="1" checked="1" /> Create nodes when needed (else don&#x27;t move reports)</label></dd>
  </dl>
  [[#txFormButton]]
  </form>>
  Context.Include('dFoot.xxmi');
 end
else
 begin
  fmt:=Context['fmt'].Value;
  autoCreate:=Context['ac'].AsInteger=1;
  if fmt='' then fmt:='ddddd';
  l:=Length(fmt);
  RlmID:=0;//counter warning
  ObjTypeID:=0;//counter warning
  dweight:=0;//counter warning

  Session.DbCon.BeginTrans;
  try
    Context.Flush;
    Context.BufferSize:=0;
    <<p>Loading reports...</p>>

    if autoCreate then
     begin
      st:=TQueryResult.Create(Session.DbCon,'SELECT ObjType.dft, Obj.rlm_id FROM Obj INNER JOIN ObjType ON ObjType.id=Obj.objtype_id WHERE Obj.id=?',[root]);
      try
        if st.EOF then raise Exception.Create('Object not found');
        RlmID:=st.GetInt('rlm_id');
        ObjTypeId:=st.GetInt('dft');
      finally
        st.Free;
      end;
      if ObjTypeID=0 then ObjTypeID:=1;//?
      dweight:=DBSingleValue('SELECT weight FROM ObjType WHERE id=?',[ObjTypeID],0);
     end;

    st:=TQueryResult.Create(Session.DbCon,'SELECT id,ts FROM Rpt WHERE obj_id=?',[root]);
    try
      while st.Read do
       begin
        if not Context.Connected then raise Exception.Create('interrupted by user');

        rid:=st.GetInt('id');
        d:=st.GetDate('ts');
        n1:='';
        id:=root;
        i:=1;
        while (i<=l) do
         begin
          j:=i;
          while (j<=l) and (fmt[j]<>'\') do inc(j);
          n:=FormatDateTime(Copy(fmt,i,j-i),d);
          n1:=n1+'\'+n;
          i:=j+1;
          nid:=id;
          id:=DbSingleValue('SELECT id FROM Obj WHERE pid=? AND name=?',[id,n],0);
          if id=0 then
            if autoCreate then
             begin
              id:=Session.DbCon.Insert('Obj',
                ['pid',nid
                ,'objtype_id',ObjTypeID
                ,'name',n
                ,sqlDesc,''
                ,'url',''
                ,'weight',dweight
                ,'rlm_id',RlmID
                ,'c_ts',VNow
                ,'c_uid',Session.UserID
                ,'m_ts',VNow
                ,'m_uid',Session.UserID
                ],'id');
              if Use_ObjPath then
               begin
                pid:=nid;
                ii:=0;
                Session.DbCon.Insert('ObjPath',['pid',id,'oid',id,'lvl',ii]);
                while pid<>0 do
                begin
                  inc(ii);
                  Session.DbCon.Insert('ObjPath',['pid',pid,'oid',id,'lvl',ii]);
                  pid:=DBSingleValue('SELECT pid FROM Obj WHERE id=?',[pid],0);
                end;
               end;
             end
            else
             begin
              //skip!
              id:=root;
              i:=l+1;
             end;
         end;

        if id<>root then
         begin
          //move
          <<p>[[=rid]]: "[[=Copy(n1,2,Length(n1)-1)]]" ([[=NiceDateTime(d)]])</p>>
          Session.DbCon.Execute('UPDATE Rpt SET obj_id=? WHERE id=?',[id,rid]);
         end;

       end;
    finally
      st.Free;
    end;

    Session.DbCon.CommitTrans;
  except
    Session.DbCon.RollbackTrans;
    raise;
  end;

 end;
