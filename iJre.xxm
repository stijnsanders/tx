[[@txDefs,txSession,Variants,DataLank]][[!var
i,id,jrt_id,id1,jrt_id1,jrx_id,g,m:integer;
qr:TQueryResult;
d,d0,d1:TDateTime;
CanReverseDate:boolean;
r:string;
b:boolean;
const
HalfAMinute=0.5/1440.0;
]][[

CheckCallProtect(Context);
//assert Use_Journals
Session.CheckJournalPermissions;
b:=false;
id:=Context['id'].AsInteger;
i:=0;
while (i<Length(Session.Journals)) and (id<>Session.Journals[i].jrl_id) do inc(i);
if i=Length(Session.Journals) then
  Context.SendHTML('&mdash;')
else
 begin
  id:=Context['x'].AsInteger;
  jrt_id:=Context['t'].AsInteger;
  r:='';

  qr:=TQueryResult.Create(Session.DbCon,
    'select Jrl.granularity, Jrx.id as jrx_id, Jrx.obj_id, Jrx.jrt_id, Jrx.ts'+
    ' from Jrl left outer join (Jrx inner join Jrt on Jrt.id=Jrx.jrt_id) on Jrx.uid=? and Jrt.jrl_id=Jrl.id'+
    ' where Jrl.id=?',
    [Session.UserID,Session.Journals[i].jrl_id]);
  try
    jrx_id:=qr.GetInt('jrx_id');
    id1:=qr.GetInt('obj_id');
    jrt_id1:=qr.GetInt('jrt_id');
    //refresh granularity
    g:=qr.GetInt('granularity');
    if g<=0 then g:=60;
    d1:=qr.GetDate('ts');
    d0:=JournalGranulate(Now,g);
    if (id1<>id) or (jrt_id1<>jrt_id) then b:=true;
  finally
    qr.Free;
  end;

  if b then
   begin  

    if (id1<>0) and (Context['r'].AsInteger<>2) then
     begin
      d:=JournalGranulate(d1,g);
      m:=Round((d0-d)*1440.0);
      Session.DbCon.BeginTrans;
      try
        if jrx_id<>0 then
          Session.DbCon.Execute('delete from Jrx where id=?',[jrx_id]);
        Session.DbCon.Insert('Jre',
          ['jrt_id',jrt_id1
          ,'obj_id',id1
          ,'uid',Session.UserID
          ,'ts',VarFromDateTime(d)
          ,'minutes',m
          ,'c_ts',VarFromDateTime(d1)
          ,'m_ts',VNow
          ]);
        r:=JournalMinutes(m);
        Session.DbCon.CommitTrans;
      except
        Session.DbCon.RollbackTrans;
        raise;
      end;
     end;

    Session.DbCon.BeginTrans;
    try
      d1:=Now;
      if jrt_id=0 then
        Session.DbCon.Execute(
          'delete from Jrx where id in (select Jrx.id from Jrx inner join Jrt on Jrt.id=Jrx.jrt_id where Jrx.uid=? and Jrt.jrl_id=?)',
          [Session.UserID,Session.Journals[i].jrl_id])
      else
        Session.DbCon.Insert('Jrx',
          ['jrt_id',jrt_id
          ,'uid',Session.UserID
          ,'obj_id',id
          ,'ts',VarFromDateTime(d1)
          ]);
      if id<>0 then Session.JournalsUsed:=true;
      Session.DbCon.CommitTrans;
    except
      Session.DbCon.RollbackTrans;
      raise;
    end;

   end;

  case Context['r'].AsInteger of
    0:
     begin
      g:=Session.Journals[i].granularity;
      if id=0 then
       begin
        id:=Context['xx'].AsInteger;
        qr:=TQueryResult.Create(Session.DbCon,'select * from Jrt where jrl_id=? order by 1',[Session.Journals[i].jrl_id]) ;
        try
          while qr.Read do
            begin
            <<span onclick="$('#jrl[[=Session.Journals[i].jrl_id]]').load('iJre.xxm',
              {id:[[=Session.Journals[i].jrl_id]],t:[[=qr.GetInt('id')]],x:[[=id]],xxx:'[[#Session.SessionCrypt]]'},
              jrl_update);">>#txImg(qr.GetInt('icon'),qr.GetStr('name'))<</span>>
            end;
        finally
          qr.Free;
        end;
        ]]&nbsp;[[
       end
      else
       begin
        CanReverseDate:=false;//default
        if Now<d1+2.0/24.0 then
         begin
          b:=false;
          qr:=TQueryResult.Create(Session.DbCon,
            'select Jre.ts+Jre.minutes/1440.0 as ts from Jre inner join Jrt on Jrt.id=Jre.jrt_id'+
            ' where Jre.id<>? and Jrt.jrl_id=? and Jre.uid=? and Jre.ts+Jre.minutes/1440.0<=? order by Jre.ts desc limit 1',
            [id,Session.Journals[i].jrl_id,Session.UserID,d1]);
          try
            if (Context['rd'].AsInteger=1) and (qr.EOF or (qr.GetDate('ts')+HalfAMinute<d1-g/1440.0)) then
             begin
              d1:=d1-g/1440.0;
              b:=true;
             end;
            if qr.EOF or (qr.GetDate('ts')+HalfAMinute<d1-g/1440.0) then
              CanReverseDate:=true;
          finally
            qr.Free;
          end;
          if b then
           begin
            Session.DbCon.BeginTrans;
            try
              Session.DbCon.Execute('update Jrx set ts=? where id=?',[d1,jrx_id]);
              Session.DbCon.CommitTrans;
            except
              Session.DbCon.RollbackTrans;
              raise;
            end;
           end;
         end;

        qr:=TQueryResult.Create(Session.DbCon,'select * from Jrt where id=?',[jrt_id]);
        try
          Context.SendHTML(txImg(qr.GetInt('icon'),qr.GetStr('name'))+JournalTime(d1,g));
        finally
          qr.Free;
        end;

        if CanReverseDate then
         begin
          ]] <a href="#" class="linkbutton" onclick="$('#jrl[[=Session.Journals[i].jrl_id]]').load('iJre.xxm',
            {id:[[=Session.Journals[i].jrl_id]],rd:1,x:[[=id]],t:[[=jrt_id]],xxx:'[[#Session.SessionCrypt]]'},
            jrl_update);return false;">-[[=g]]&#x27;</a>>
         end
        else
        if Context['rd'].AsInteger=1 then
         begin
          //show something here to catch repeat-clicking the reverse date button
          <<span style="user-select:none;">&emsp;&ensp;</span>>
         end;
        ]] <a href="#" class="linkbutton" onclick="$('#jrl[[=Session.Journals[i].jrl_id]]').load('iJre.xxm',
          {id:[[=Session.Journals[i].jrl_id]],x:0,xx:[[=id]],xxx:'[[#Session.SessionCrypt]]'},
          jrl_update);return false;">&bullet;</a>
        &nbsp;[[
       end;
      if r<>'' then
       begin
        <<span class="small" style="color:silver;">&rsaquo;[[=r<</span>>
       end;
     end;
    1,2:
     begin
      Context.Redirect('Journal.xxm',true);
     end;
    3:
     begin
      Session.Journals[i].fDisplay:=r;
      Context.Redirect('FrameJrl.xxm',true);
     end;
    else
      raise Exception.Create('Unsupported "r" value');
  end;
 end;