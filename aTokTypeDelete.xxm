[[@txDefs,DataLank,txSession,txFilterSql,]][[!var
id,pid,nid,i,weight,w:integer;
url:string;
qr:TQueryResult;
ids:TIdList;
]][[

CheckFormProtect(Context);
id:=Context['id'].AsInteger;
qr:=TQueryResult.Create(Session.DbCon,'SELECT pid, weight FROM TokType WHERE id=?',[id]);
try
  pid:=qr.GetInt('pid');
  weight:=qr.GetInt('weight');
finally
  qr.Free;
end;

//check edit permission in default realm
Session.HasRealmPermission(0,DefaultRlmID,rpEdit);

//TODO: check token's object's realm

//TODO: transaction?

Session.RemoveFilterRecent(itTokType,id);
Session.DeleteID:=id;//pass to client-side script to update tree

Session.DbCon.BeginTrans;
try

  ids:=TIdList.Create;
  try
    ids.Add(id);

    //children
    if Context['children'].AsInteger=1 then
     begin
      //move to
      nid:=Context['movechto'].AsInteger;
      if nid=0 then raise Exception.Create('Token type to move children to required.');
      Session.AddFilterRecent(itTokType,nid);
      Session.DbCon.Execute('UPDATE TokType SET pid=? WHERE pid=?',[nid,id]);
     end
    else
     begin
      //cascaded
        i:=0;
        while i<ids.Count do
         begin
          qr:=TQueryResult.Create(Session.DbCon,'SELECT TokType.id FROM TokType WHERE TokType.pid='+IntToStrU(ids[i]),[]);
          try
            while qr.Read do ids.Add(qr.GetInt(0));
          finally
            qr.Free;
          end;
          inc(i);
         end;
     end;

     //tokens
    if Context['tokens'].AsInteger=1 then
     begin
      nid:=Context['movetokto'].AsInteger;
      if nid=0 then raise Exception.Create('Token type to change tokens to required.');
      Session.AddFilterRecent(itTokType,nid);
      for i:=0 to ids.Count-1 do
       begin
        id:=ids[i];
        //TODO: update weight!
        w:=-weight+DBSingleValue('SELECT weight FROM TokType WHERE id=?',[nid],0);
        if not(w=0) then Session.DbCon.Execute('UPDATE Obj SET weight=weight+(?) WHERE id IN (SELECT obj_id FROM Tok WHERE toktype_id=?)',[w,id]);
        if Use_ObjTokRefCache then //TODO: re-create entries? see MaintObjTokRefCache.xxm
          Session.DbCon.Execute('DELETE FROM ObjTokRefCache WHERE id IN (SELECT obj_id FROM Tok WHERE toktype_id=?)',[id]);
        Session.DbCon.Execute('UPDATE Tok SET toktype_id=? WHERE toktype_id=?',[nid,id]);
        Session.DbCon.Execute('UPDATE Rpt SET toktype_id=? WHERE toktype_id=?',[nid,id]);
       end;
     end
    else
      for i:=0 to ids.Count-1 do
       begin
        id:=ids[i];
        if weight<>0 then Session.DbCon.Execute('UPDATE Obj SET weight=weight+(?) WHERE id IN (SELECT obj_id FROM Tok WHERE toktype_id=?)',[-weight,id]);
        if Use_ObjTokRefCache then //TODO: re-create entries? see MaintObjTokRefCache.xxm
          Session.DbCon.Execute('DELETE FROM ObjTokRefCache WHERE id IN (SELECT obj_id FROM Tok WHERE toktype_id=?)',[id]);
        Session.DbCon.Execute('DELETE FROM Trl WHERE source=?',['t'+IntToStr(id)]);
        Session.DbCon.Execute('DELETE FROM Tok WHERE toktype_id=?',[id]);
        Session.DbCon.Execute('DELETE FROM Trl WHERE source IN (SELECT ''rp''||id FROM Rpt WHERE toktype_id=?)',[id]);
        Session.DbCon.Execute('DELETE FROM Rpt WHERE toktype_id=?',[id]);
       end;

    for i:=ids.Count-1 downto 0 do
     begin
      id:=ids[i];
      //Delete_TokByTokTypeID: see above
      Session.DbCon.Execute('DELETE FROM Trl WHERE source=?',['tt'+IntToStr(id)]);
      Session.DbCon.Execute('DELETE FROM TokType WHERE id=?',[id]);
     end;
  finally
    ids.Free;
  end;

  Session.DbCon.CommitTrans;
except
  Session.DbCon.RollbackTrans;
  raise;
end;

url:='Item.xxm?x=tt'+IntToStr(pid);
Context.Redirect(url,true);
<<a href="[[=url]]">>=url<</a>
